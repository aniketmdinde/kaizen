# This starter workflow is for a CMake project running on multiple platforms.
# There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build

on:
  push:
    branches: [ "master" ]
    paths-ignore: # careful not to ignore non-code files that are parsed by code
      - '*.md'
      - '.gitignore'
  pull_request:
    branches: [ "master" ]
    paths-ignore: # careful not to ignore non-code files that are parsed by code
      - '*.md'
      - '.gitignore'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false # so that feedback is delivered for all matrix combinations; consider changing this to true when workflow is stable

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC  compiler toolchain on the default runner image, default generator>
      # 2. <Linux,   Release, latest GCC   compiler toolchain on the default runner image, default generator>
      # 3. <Linux,   Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl, 'gcc-11', 'gcc-10', 'gcc-9', 'clang-14']
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-latest
            c_compiler: gcc-11
            cpp_compiler: g++-11
          - os: ubuntu-latest
            c_compiler: gcc-10
            cpp_compiler: g++-10
          - os: ubuntu-latest
            c_compiler: gcc-9
            cpp_compiler: g++-9
          - os: ubuntu-latest
            c_compiler: clang-14
            cpp_compiler: clang++-14
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    #- name: Install dependencies
    #  run: |
    #    apt-get update
    #    apt-get install -y ${{ matrix.c_compiler }} ${{ matrix.c_compiler }}++  # install the necessary compilers

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs.
      # These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only
      # required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because
      # the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Upload Artifacts on Failure
      if: failure() # so that we can get the artifacts and inspect why builds fail, for example
      uses: actions/upload-artifact@v2
      with:
        name: kaizen-ci-failed-build-artifacts-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.c_compiler }}
        path: ${{ steps.strings.outputs.build-output-dir }}/*
        
    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because
      # the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

      # TODO: Seems like this step should be configured in CMake, but there it isn't picked up. See why.
    - name: Test by running kaizen executable (Linux)
      if: success() && runner.os != 'Windows'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: ./kaizen -verbose

    - name: Test by running kaizen executable (Windows)
      if: success() && runner.os == 'Windows'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: .\\Release\\kaizen.exe -verbose